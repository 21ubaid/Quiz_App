{"version":3,"sources":["components/progressbar.js","components/solidStar.js","components/regularStar.js","screen/Questions.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","props","state","style","setTimeout","done","newStyle","opacity","width","setState","this","className","Component","SuccessBar","styleSuc","styleRig","styleWro","right","wrong","correct","attempt","rightPercent","remain","wrongPercent","successPercent","newStyleSuc","textAlign","newStyleRig","newStyleWro","success","SolidStar","icon","faStar","RegularStar","questions","current","next","unsuccess","rightAns","progress","total","handleAns","e","a","target","value","background","color","border","ques","slice","map","data","index","key","decodeURIComponent","category","difficulty","question","correct_answer","onClick","incorrect_answers","opt","backgroundColor","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d83cc6ee.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class ProgressBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      style: null,\r\n    };\r\n  }\r\n  render() {\r\n    setTimeout(() => {\r\n      const { done } = this.props;\r\n      const newStyle = {\r\n        opacity: 1,\r\n        width: `${done}%`,\r\n      };\r\n\r\n      this.setState({ style: newStyle });\r\n    }, 2000);\r\n    const { style } = this.state;\r\n    const { done } = this.props;\r\n    return (\r\n      <div>\r\n        <div className=\"progress\">\r\n          <div className=\"progress-bar\" style={style}>\r\n            {done}%\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class SuccessBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      styleSuc: null,\r\n      styleRig: null,\r\n      styleWro: null,\r\n      right: 0,\r\n      wrong: 0,\r\n      done: 0,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    setTimeout(() => {\r\n      const { correct, attempt, remain } = this.props;\r\n\r\n      const rightPercent = ((correct + remain) * 100) / 20;\r\n      const wrongPercent = 100 - (correct * 100) / 20;\r\n      const successPercent = (correct * 100) / attempt;\r\n\r\n      const newStyleSuc = {\r\n        opacity: 1,\r\n        textAlign: \"right\",\r\n        width: `${successPercent}%`,\r\n      };\r\n      const newStyleRig = {\r\n        opacity: 1,\r\n        textAlign: \"right\",\r\n        width: `${rightPercent}%`,\r\n      };\r\n      const newStyleWro = {\r\n        opacity: 1,\r\n        textAlign: \"right\",\r\n        width: `${wrongPercent}%`,\r\n      };\r\n\r\n      this.setState({\r\n        styleSuc: newStyleSuc,\r\n        styleRig: newStyleRig,\r\n        styleWro: newStyleWro,\r\n        right: rightPercent,\r\n        wrong: wrongPercent,\r\n        done: successPercent,\r\n      });\r\n    }, 2000);\r\n    const { styleSuc, styleRig, styleWro, done, right, wrong } = this.state;\r\n    const { success } = this.props;\r\n    return (\r\n      <div>\r\n        <div className=\"bar\">\r\n          <div className=\"progress-right\" style={styleRig}>\r\n            <p>{right}%</p>\r\n          </div>\r\n          <div className=\"progress-done\" style={styleSuc}>\r\n            {done}%\r\n          </div>\r\n          <div className=\"progress-wrong\" style={styleWro}>\r\n            <p>{wrong}%</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SolidStar = () => {\r\n  return <FontAwesomeIcon icon={faStar} />;\r\n};\r\n\r\nexport default SolidStar;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStar } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nconst RegularStar = () => {\r\n  return <FontAwesomeIcon icon={faStar} />;\r\n};\r\n\r\nexport default RegularStar;\r\n","import React, { Component } from \"react\";\r\n\r\nimport ques from \"../components/json/questions.json\";\r\n\r\nimport { ProgressBar, SuccessBar } from \"../components/progressbar\";\r\n\r\n//Icon\r\nimport SolidStar from \"../components/solidStar\";\r\nimport RegularStar from \"../components/regularStar\";\r\n\r\nexport default class questions extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      current: 0,\r\n      next: 1,\r\n      success: null,\r\n      unsuccess: null,\r\n      rightAns: \"\",\r\n      correct: 0,\r\n      wrong: 0,\r\n      progress: 0,\r\n      total: 20,\r\n      attempt: 0,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const handleAns = (e, a) => {\r\n      var ans = e.target.value;\r\n      {\r\n        if (ans === a) {\r\n          this.setState({\r\n            success: {\r\n              background: \"#145A32\",\r\n              color: \"#fff\",\r\n              border: \"#145A32\",\r\n            },\r\n            correct: ++this.state.correct,\r\n            attempt: ++this.state.attempt,\r\n            remain: this.state.total - this.state.attempt,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            success: {\r\n              background: \"#145A32\",\r\n              color: \"#fff\",\r\n              border: \"#145A32\",\r\n            },\r\n            unsuccess: {\r\n              background: \"#A93226\",\r\n              color: \"#fff\",\r\n              border: \"#A93226\",\r\n            },\r\n            wrong: ++this.state.wrong,\r\n            attempt: ++this.state.attempt,\r\n            remain: this.state.total - this.state.attempt,\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    const handleNext = () => {\r\n      this.setState({\r\n        current: this.state.next,\r\n        next:\r\n          this.state.next >= ques.length\r\n            ? this.state.next\r\n            : this.state.next + 1,\r\n\r\n        success: null,\r\n        unsuccess: null,\r\n        rightAns: \"\",\r\n        progress: this.state.progress + 5,\r\n      });\r\n    };\r\n\r\n    const {\r\n      current,\r\n      next,\r\n      success,\r\n      unsuccess,\r\n      progress,\r\n      attempt,\r\n      total,\r\n      remain,\r\n      correct,\r\n      wrong,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <ProgressBar done={progress} />\r\n        <div>\r\n          {ques.slice(current, next).map((data, index) => {\r\n            return (\r\n              <div key={index} className=\"quizPanel\">\r\n                <div>\r\n                  <h1>\r\n                    Question {attempt} of {total}{\" \"}\r\n                  </h1>\r\n                  <h2>{decodeURIComponent(data.category)}</h2>\r\n                  {data.difficulty === \"hard\" ? (\r\n                    <div className=\"iconStyle\">\r\n                      <SolidStar />\r\n                      <SolidStar />\r\n                      <SolidStar />\r\n                      <RegularStar />\r\n                      <RegularStar />\r\n                    </div>\r\n                  ) : data.difficulty === \"medium\" ? (\r\n                    <div className=\"iconStyle\">\r\n                      <SolidStar />\r\n                      <SolidStar />\r\n                      <RegularStar />\r\n                      <RegularStar />\r\n                      <RegularStar />\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"iconStyle\">\r\n                      <SolidStar />\r\n                      <RegularStar />\r\n                      <RegularStar />\r\n                      <RegularStar />\r\n                      <RegularStar />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"quiz\">\r\n                  <div>\r\n                    <h3>Q: {decodeURIComponent(data.question)}</h3>\r\n                  </div>\r\n                  <div className=\"option\">\r\n                    <button\r\n                      value={data.correct_answer}\r\n                      onClick={(e) => handleAns(e, data.correct_answer)}\r\n                      style={success}\r\n                    >\r\n                      {decodeURIComponent(data.correct_answer)}\r\n                    </button>\r\n                    {data.incorrect_answers.map((opt) => {\r\n                      return (\r\n                        <button\r\n                          key={opt}\r\n                          value={opt}\r\n                          onClick={(e) => handleAns(e, data.correct_answer)}\r\n                          style={unsuccess}\r\n                        >\r\n                          {decodeURIComponent(opt)}\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n                <div className=\"option\">\r\n                  <button\r\n                    style={{ backgroundColor: \"#dec664\" }}\r\n                    onClick={() => handleNext()}\r\n                  >\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        {progress === 100 ? (\r\n          <div className=\"quizPanel\">\r\n            <h2>\r\n              Total Questions are {total}. You attempt {attempt} Questions in\r\n              which {correct} were right and {wrong} were wrong answers.\r\n            </h2>\r\n          </div>\r\n        ) : null}\r\n        <SuccessBar correct={correct} attempt={attempt} remain={remain} a />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Questions from \"./screen/Questions\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Questions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}